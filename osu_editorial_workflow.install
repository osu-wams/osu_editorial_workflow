<?php

/**
 * @file
 * Install, update, and uninstall functions for the OSU Editorial Workflow
 *   module.
 */

use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function osu_editorial_workflow_install($is_syncing): void {
  // Load page and story content types and enable scheduler.
  $page_content_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('page');
  $story_content_type = \Drupal::entityTypeManager()
    ->getStorage('node_type')
    ->load('story');

  $scheduler_settings = [
    "expand_fieldset" => "when_required",
    "fields_display_mode" => "vertical_tab",
    "publish_enable" => TRUE,
    "publish_past_date" => "error",
    "publish_past_date_created" => FALSE,
    "publish_required" => FALSE,
    "publish_revision" => FALSE,
    "publish_touch" => FALSE,
    "show_message_after_update" => TRUE,
    "unpublish_enable" => TRUE,
    "unpublish_required" => FALSE,
    "unpublish_revision" => FALSE,
  ];
  foreach ($scheduler_settings as $scheduler_setting_key => $scheduler_setting_value) {
    $page_content_type->setThirdPartySetting('scheduler', $scheduler_setting_key, $scheduler_setting_value);
    $story_content_type->setThirdPartySetting('scheduler', $scheduler_setting_key, $scheduler_setting_value);
  }
  $page_content_type->save();
  $story_content_type->save();

  // Load our roles to set permissions.
  $editorial_roles = Role::loadMultiple([
    'content_author',
    'group_content_author',
    'manage_content',
    'architect',
    'dx_administrator',
  ]);
  $administrative_roles = Role::loadMultiple([
    'manage_site_configuration',
    'architect',
    'dx_administrator',
  ]);
  $editorial_permissions = [
    'use editorial transition archive',
    'use editorial transition create_new_draft',
    'use editorial transition publish',
    'use editorial transition archived_published',
    'use editorial transition archived_draft',
    'view any unpublished content',
    'view latest version',
    'use moderation sidebar',
    'schedule publishing of nodes',
    'schedule publishing of nodes',
  ];
  $administrative_permissions = [
    'administer scheduler',
  ];
  /** @var Drupal\user\Entity\Role $role */
  foreach ($editorial_roles as $role) {
    foreach ($editorial_permissions as $permission) {
      $role->grantPermission($permission);
    }
  }
  /** @var Drupal\user\Entity\Role $role */
  foreach ($administrative_roles as $role) {
    foreach ($administrative_permissions as $permission) {
      $role->grantPermission($permission);
    }
  }
}
